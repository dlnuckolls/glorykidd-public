//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18034.
// 
#pragma warning disable 1591

namespace Kindred.Knect.ITAT.Web.PDFService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://kindredhealthcare.com/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GeneratePDF1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePDF2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePDF3OperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePDF4OperationCompleted;
        
        private System.Threading.SendOrPostCallback GeneratePDF5OperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeExtendedOperationCompleted;
        
        private System.Threading.SendOrPostCallback StitchDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback StitchPagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintPDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrintPDFWithFailoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback AvailablePrintersOperationCompleted;
        
        private System.Threading.SendOrPostCallback PrinterExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CanOpenPrinterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImpersonatedUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstalledPrintersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Kindred.Knect.ITAT.Web.Properties.Settings.Default.Knect_ITAT_Web_PDFService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GeneratePDF1CompletedEventHandler GeneratePDF1Completed;
        
        /// <remarks/>
        public event GeneratePDF2CompletedEventHandler GeneratePDF2Completed;
        
        /// <remarks/>
        public event GeneratePDF3CompletedEventHandler GeneratePDF3Completed;
        
        /// <remarks/>
        public event GeneratePDF4CompletedEventHandler GeneratePDF4Completed;
        
        /// <remarks/>
        public event GeneratePDF5CompletedEventHandler GeneratePDF5Completed;
        
        /// <remarks/>
        public event MergeCompletedEventHandler MergeCompleted;
        
        /// <remarks/>
        public event MergeExtendedCompletedEventHandler MergeExtendedCompleted;
        
        /// <remarks/>
        public event StitchDocumentsCompletedEventHandler StitchDocumentsCompleted;
        
        /// <remarks/>
        public event StitchPagesCompletedEventHandler StitchPagesCompleted;
        
        /// <remarks/>
        public event PageCountCompletedEventHandler PageCountCompleted;
        
        /// <remarks/>
        public event PrintPDFCompletedEventHandler PrintPDFCompleted;
        
        /// <remarks/>
        public event PrintPDFWithFailoverCompletedEventHandler PrintPDFWithFailoverCompleted;
        
        /// <remarks/>
        public event AvailablePrintersCompletedEventHandler AvailablePrintersCompleted;
        
        /// <remarks/>
        public event PrinterExistsCompletedEventHandler PrinterExistsCompleted;
        
        /// <remarks/>
        public event CanOpenPrinterCompletedEventHandler CanOpenPrinterCompleted;
        
        /// <remarks/>
        public event GetImpersonatedUserCompletedEventHandler GetImpersonatedUserCompleted;
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        public event InstalledPrintersCompletedEventHandler InstalledPrintersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GeneratePDF1", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GeneratePDF1(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, string OwnerPassword, bool Strong, bool CopyExtract, bool Change, bool AuthorCommentsFormFields, bool Assembly, bool FormFillSign, bool ExtractAccessibilityContents, bool PrintHighQuality, bool Print) {
            object[] results = this.Invoke("GeneratePDF1", new object[] {
                        PDFXML,
                        IncludeDraft,
                        ExtendedPDFFiles,
                        OwnerPassword,
                        Strong,
                        CopyExtract,
                        Change,
                        AuthorCommentsFormFields,
                        Assembly,
                        FormFillSign,
                        ExtractAccessibilityContents,
                        PrintHighQuality,
                        Print});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePDF1Async(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, string OwnerPassword, bool Strong, bool CopyExtract, bool Change, bool AuthorCommentsFormFields, bool Assembly, bool FormFillSign, bool ExtractAccessibilityContents, bool PrintHighQuality, bool Print) {
            this.GeneratePDF1Async(PDFXML, IncludeDraft, ExtendedPDFFiles, OwnerPassword, Strong, CopyExtract, Change, AuthorCommentsFormFields, Assembly, FormFillSign, ExtractAccessibilityContents, PrintHighQuality, Print, null);
        }
        
        /// <remarks/>
        public void GeneratePDF1Async(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, string OwnerPassword, bool Strong, bool CopyExtract, bool Change, bool AuthorCommentsFormFields, bool Assembly, bool FormFillSign, bool ExtractAccessibilityContents, bool PrintHighQuality, bool Print, object userState) {
            if ((this.GeneratePDF1OperationCompleted == null)) {
                this.GeneratePDF1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDF1OperationCompleted);
            }
            this.InvokeAsync("GeneratePDF1", new object[] {
                        PDFXML,
                        IncludeDraft,
                        ExtendedPDFFiles,
                        OwnerPassword,
                        Strong,
                        CopyExtract,
                        Change,
                        AuthorCommentsFormFields,
                        Assembly,
                        FormFillSign,
                        ExtractAccessibilityContents,
                        PrintHighQuality,
                        Print}, this.GeneratePDF1OperationCompleted, userState);
        }
        
        private void OnGeneratePDF1OperationCompleted(object arg) {
            if ((this.GeneratePDF1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDF1Completed(this, new GeneratePDF1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GeneratePDF2", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GeneratePDF2(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting) {
            object[] results = this.Invoke("GeneratePDF2", new object[] {
                        PDFXML,
                        IncludeDraft,
                        ExtendedPDFFiles,
                        Protect,
                        AllowPrinting});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePDF2Async(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting) {
            this.GeneratePDF2Async(PDFXML, IncludeDraft, ExtendedPDFFiles, Protect, AllowPrinting, null);
        }
        
        /// <remarks/>
        public void GeneratePDF2Async(string PDFXML, bool IncludeDraft, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting, object userState) {
            if ((this.GeneratePDF2OperationCompleted == null)) {
                this.GeneratePDF2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDF2OperationCompleted);
            }
            this.InvokeAsync("GeneratePDF2", new object[] {
                        PDFXML,
                        IncludeDraft,
                        ExtendedPDFFiles,
                        Protect,
                        AllowPrinting}, this.GeneratePDF2OperationCompleted, userState);
        }
        
        private void OnGeneratePDF2OperationCompleted(object arg) {
            if ((this.GeneratePDF2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDF2Completed(this, new GeneratePDF2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GeneratePDF3", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GeneratePDF3(string PDFXML, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting) {
            object[] results = this.Invoke("GeneratePDF3", new object[] {
                        PDFXML,
                        ExtendedPDFFiles,
                        Protect,
                        AllowPrinting});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePDF3Async(string PDFXML, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting) {
            this.GeneratePDF3Async(PDFXML, ExtendedPDFFiles, Protect, AllowPrinting, null);
        }
        
        /// <remarks/>
        public void GeneratePDF3Async(string PDFXML, byte[][] ExtendedPDFFiles, bool Protect, bool AllowPrinting, object userState) {
            if ((this.GeneratePDF3OperationCompleted == null)) {
                this.GeneratePDF3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDF3OperationCompleted);
            }
            this.InvokeAsync("GeneratePDF3", new object[] {
                        PDFXML,
                        ExtendedPDFFiles,
                        Protect,
                        AllowPrinting}, this.GeneratePDF3OperationCompleted, userState);
        }
        
        private void OnGeneratePDF3OperationCompleted(object arg) {
            if ((this.GeneratePDF3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDF3Completed(this, new GeneratePDF3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GeneratePDF4", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GeneratePDF4(string PDFXML, bool IncludeDraft, bool Protect, bool AllowPrinting) {
            object[] results = this.Invoke("GeneratePDF4", new object[] {
                        PDFXML,
                        IncludeDraft,
                        Protect,
                        AllowPrinting});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePDF4Async(string PDFXML, bool IncludeDraft, bool Protect, bool AllowPrinting) {
            this.GeneratePDF4Async(PDFXML, IncludeDraft, Protect, AllowPrinting, null);
        }
        
        /// <remarks/>
        public void GeneratePDF4Async(string PDFXML, bool IncludeDraft, bool Protect, bool AllowPrinting, object userState) {
            if ((this.GeneratePDF4OperationCompleted == null)) {
                this.GeneratePDF4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDF4OperationCompleted);
            }
            this.InvokeAsync("GeneratePDF4", new object[] {
                        PDFXML,
                        IncludeDraft,
                        Protect,
                        AllowPrinting}, this.GeneratePDF4OperationCompleted, userState);
        }
        
        private void OnGeneratePDF4OperationCompleted(object arg) {
            if ((this.GeneratePDF4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDF4Completed(this, new GeneratePDF4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GeneratePDF5", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GeneratePDF5(string PDFXML) {
            object[] results = this.Invoke("GeneratePDF5", new object[] {
                        PDFXML});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GeneratePDF5Async(string PDFXML) {
            this.GeneratePDF5Async(PDFXML, null);
        }
        
        /// <remarks/>
        public void GeneratePDF5Async(string PDFXML, object userState) {
            if ((this.GeneratePDF5OperationCompleted == null)) {
                this.GeneratePDF5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeneratePDF5OperationCompleted);
            }
            this.InvokeAsync("GeneratePDF5", new object[] {
                        PDFXML}, this.GeneratePDF5OperationCompleted, userState);
        }
        
        private void OnGeneratePDF5OperationCompleted(object arg) {
            if ((this.GeneratePDF5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeneratePDF5Completed(this, new GeneratePDF5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/Merge", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Merge(MergeSpecification mergeSpecification) {
            object[] results = this.Invoke("Merge", new object[] {
                        mergeSpecification});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void MergeAsync(MergeSpecification mergeSpecification) {
            this.MergeAsync(mergeSpecification, null);
        }
        
        /// <remarks/>
        public void MergeAsync(MergeSpecification mergeSpecification, object userState) {
            if ((this.MergeOperationCompleted == null)) {
                this.MergeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeOperationCompleted);
            }
            this.InvokeAsync("Merge", new object[] {
                        mergeSpecification}, this.MergeOperationCompleted, userState);
        }
        
        private void OnMergeOperationCompleted(object arg) {
            if ((this.MergeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeCompleted(this, new MergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/MergeExtended", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] MergeExtended(MergeSpecification mergeSpecification, PdfFieldExtended[] pdfFieldExtendeds) {
            object[] results = this.Invoke("MergeExtended", new object[] {
                        mergeSpecification,
                        pdfFieldExtendeds});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void MergeExtendedAsync(MergeSpecification mergeSpecification, PdfFieldExtended[] pdfFieldExtendeds) {
            this.MergeExtendedAsync(mergeSpecification, pdfFieldExtendeds, null);
        }
        
        /// <remarks/>
        public void MergeExtendedAsync(MergeSpecification mergeSpecification, PdfFieldExtended[] pdfFieldExtendeds, object userState) {
            if ((this.MergeExtendedOperationCompleted == null)) {
                this.MergeExtendedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeExtendedOperationCompleted);
            }
            this.InvokeAsync("MergeExtended", new object[] {
                        mergeSpecification,
                        pdfFieldExtendeds}, this.MergeExtendedOperationCompleted, userState);
        }
        
        private void OnMergeExtendedOperationCompleted(object arg) {
            if ((this.MergeExtendedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeExtendedCompleted(this, new MergeExtendedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/StitchDocuments", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] StitchDocuments(byte[][] documents) {
            object[] results = this.Invoke("StitchDocuments", new object[] {
                        documents});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void StitchDocumentsAsync(byte[][] documents) {
            this.StitchDocumentsAsync(documents, null);
        }
        
        /// <remarks/>
        public void StitchDocumentsAsync(byte[][] documents, object userState) {
            if ((this.StitchDocumentsOperationCompleted == null)) {
                this.StitchDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStitchDocumentsOperationCompleted);
            }
            this.InvokeAsync("StitchDocuments", new object[] {
                        documents}, this.StitchDocumentsOperationCompleted, userState);
        }
        
        private void OnStitchDocumentsOperationCompleted(object arg) {
            if ((this.StitchDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StitchDocumentsCompleted(this, new StitchDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/StitchPages", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] StitchPages([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] document, int[] pages) {
            object[] results = this.Invoke("StitchPages", new object[] {
                        document,
                        pages});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void StitchPagesAsync(byte[] document, int[] pages) {
            this.StitchPagesAsync(document, pages, null);
        }
        
        /// <remarks/>
        public void StitchPagesAsync(byte[] document, int[] pages, object userState) {
            if ((this.StitchPagesOperationCompleted == null)) {
                this.StitchPagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStitchPagesOperationCompleted);
            }
            this.InvokeAsync("StitchPages", new object[] {
                        document,
                        pages}, this.StitchPagesOperationCompleted, userState);
        }
        
        private void OnStitchPagesOperationCompleted(object arg) {
            if ((this.StitchPagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StitchPagesCompleted(this, new StitchPagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/PageCount", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PageCount([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] document) {
            object[] results = this.Invoke("PageCount", new object[] {
                        document});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PageCountAsync(byte[] document) {
            this.PageCountAsync(document, null);
        }
        
        /// <remarks/>
        public void PageCountAsync(byte[] document, object userState) {
            if ((this.PageCountOperationCompleted == null)) {
                this.PageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPageCountOperationCompleted);
            }
            this.InvokeAsync("PageCount", new object[] {
                        document}, this.PageCountOperationCompleted, userState);
        }
        
        private void OnPageCountOperationCompleted(object arg) {
            if ((this.PageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PageCountCompleted(this, new PageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/PrintPDF", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PrintPDF(byte[][] documents, string printer) {
            this.Invoke("PrintPDF", new object[] {
                        documents,
                        printer});
        }
        
        /// <remarks/>
        public void PrintPDFAsync(byte[][] documents, string printer) {
            this.PrintPDFAsync(documents, printer, null);
        }
        
        /// <remarks/>
        public void PrintPDFAsync(byte[][] documents, string printer, object userState) {
            if ((this.PrintPDFOperationCompleted == null)) {
                this.PrintPDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintPDFOperationCompleted);
            }
            this.InvokeAsync("PrintPDF", new object[] {
                        documents,
                        printer}, this.PrintPDFOperationCompleted, userState);
        }
        
        private void OnPrintPDFOperationCompleted(object arg) {
            if ((this.PrintPDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintPDFCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/PrintPDFWithFailover", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PrintPDFWithFailover(byte[][] documents, string[] printers) {
            object[] results = this.Invoke("PrintPDFWithFailover", new object[] {
                        documents,
                        printers});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PrintPDFWithFailoverAsync(byte[][] documents, string[] printers) {
            this.PrintPDFWithFailoverAsync(documents, printers, null);
        }
        
        /// <remarks/>
        public void PrintPDFWithFailoverAsync(byte[][] documents, string[] printers, object userState) {
            if ((this.PrintPDFWithFailoverOperationCompleted == null)) {
                this.PrintPDFWithFailoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrintPDFWithFailoverOperationCompleted);
            }
            this.InvokeAsync("PrintPDFWithFailover", new object[] {
                        documents,
                        printers}, this.PrintPDFWithFailoverOperationCompleted, userState);
        }
        
        private void OnPrintPDFWithFailoverOperationCompleted(object arg) {
            if ((this.PrintPDFWithFailoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrintPDFWithFailoverCompleted(this, new PrintPDFWithFailoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/AvailablePrinters", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] AvailablePrinters(string hostName, string substring) {
            object[] results = this.Invoke("AvailablePrinters", new object[] {
                        hostName,
                        substring});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AvailablePrintersAsync(string hostName, string substring) {
            this.AvailablePrintersAsync(hostName, substring, null);
        }
        
        /// <remarks/>
        public void AvailablePrintersAsync(string hostName, string substring, object userState) {
            if ((this.AvailablePrintersOperationCompleted == null)) {
                this.AvailablePrintersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAvailablePrintersOperationCompleted);
            }
            this.InvokeAsync("AvailablePrinters", new object[] {
                        hostName,
                        substring}, this.AvailablePrintersOperationCompleted, userState);
        }
        
        private void OnAvailablePrintersOperationCompleted(object arg) {
            if ((this.AvailablePrintersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AvailablePrintersCompleted(this, new AvailablePrintersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/PrinterExists", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PrinterExists(string printerName) {
            object[] results = this.Invoke("PrinterExists", new object[] {
                        printerName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PrinterExistsAsync(string printerName) {
            this.PrinterExistsAsync(printerName, null);
        }
        
        /// <remarks/>
        public void PrinterExistsAsync(string printerName, object userState) {
            if ((this.PrinterExistsOperationCompleted == null)) {
                this.PrinterExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrinterExistsOperationCompleted);
            }
            this.InvokeAsync("PrinterExists", new object[] {
                        printerName}, this.PrinterExistsOperationCompleted, userState);
        }
        
        private void OnPrinterExistsOperationCompleted(object arg) {
            if ((this.PrinterExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrinterExistsCompleted(this, new PrinterExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/CanOpenPrinter", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CanOpenPrinter(string printerName) {
            object[] results = this.Invoke("CanOpenPrinter", new object[] {
                        printerName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CanOpenPrinterAsync(string printerName) {
            this.CanOpenPrinterAsync(printerName, null);
        }
        
        /// <remarks/>
        public void CanOpenPrinterAsync(string printerName, object userState) {
            if ((this.CanOpenPrinterOperationCompleted == null)) {
                this.CanOpenPrinterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCanOpenPrinterOperationCompleted);
            }
            this.InvokeAsync("CanOpenPrinter", new object[] {
                        printerName}, this.CanOpenPrinterOperationCompleted, userState);
        }
        
        private void OnCanOpenPrinterOperationCompleted(object arg) {
            if ((this.CanOpenPrinterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CanOpenPrinterCompleted(this, new CanOpenPrinterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GetImpersonatedUser", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetImpersonatedUser() {
            object[] results = this.Invoke("GetImpersonatedUser", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetImpersonatedUserAsync() {
            this.GetImpersonatedUserAsync(null);
        }
        
        /// <remarks/>
        public void GetImpersonatedUserAsync(object userState) {
            if ((this.GetImpersonatedUserOperationCompleted == null)) {
                this.GetImpersonatedUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImpersonatedUserOperationCompleted);
            }
            this.InvokeAsync("GetImpersonatedUser", new object[0], this.GetImpersonatedUserOperationCompleted, userState);
        }
        
        private void OnGetImpersonatedUserOperationCompleted(object arg) {
            if ((this.GetImpersonatedUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImpersonatedUserCompleted(this, new GetImpersonatedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/GetVersion", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://kindredhealthcare.com/InstalledPrinters", RequestNamespace="http://kindredhealthcare.com/", ResponseNamespace="http://kindredhealthcare.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] InstalledPrinters() {
            object[] results = this.Invoke("InstalledPrinters", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void InstalledPrintersAsync() {
            this.InstalledPrintersAsync(null);
        }
        
        /// <remarks/>
        public void InstalledPrintersAsync(object userState) {
            if ((this.InstalledPrintersOperationCompleted == null)) {
                this.InstalledPrintersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstalledPrintersOperationCompleted);
            }
            this.InvokeAsync("InstalledPrinters", new object[0], this.InstalledPrintersOperationCompleted, userState);
        }
        
        private void OnInstalledPrintersOperationCompleted(object arg) {
            if ((this.InstalledPrintersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstalledPrintersCompleted(this, new InstalledPrintersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public partial class MergeSpecification {
        
        private byte[] basePdfField;
        
        private PdfField[] pdfFieldsField;
        
        private TrueTypeFontSpecification[] trueTypeFontsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BasePdf {
            get {
                return this.basePdfField;
            }
            set {
                this.basePdfField = value;
            }
        }
        
        /// <remarks/>
        public PdfField[] PdfFields {
            get {
                return this.pdfFieldsField;
            }
            set {
                this.pdfFieldsField = value;
            }
        }
        
        /// <remarks/>
        public TrueTypeFontSpecification[] TrueTypeFonts {
            get {
                return this.trueTypeFontsField;
            }
            set {
                this.trueTypeFontsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PdfFieldExtended))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public partial class PdfField {
        
        private string nameField;
        
        private PdfFieldType pdfFieldTypeField;
        
        private double xField;
        
        private double yField;
        
        private double heightField;
        
        private double widthField;
        
        private SpecialPages specialPagesField;
        
        private int pageNumberField;
        
        private FontType fontTypeField;
        
        private string fontNameField;
        
        private double fontSizeField;
        
        private bool fontBoldField;
        
        private bool fontItalicField;
        
        private HorizontalAlignment horizontalAlignmentField;
        
        private string valueField;
        
        private bool wrapField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public PdfFieldType PdfFieldType {
            get {
                return this.pdfFieldTypeField;
            }
            set {
                this.pdfFieldTypeField = value;
            }
        }
        
        /// <remarks/>
        public double X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public double Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks/>
        public double Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        public double Width {
            get {
                return this.widthField;
            }
            set {
                this.widthField = value;
            }
        }
        
        /// <remarks/>
        public SpecialPages SpecialPages {
            get {
                return this.specialPagesField;
            }
            set {
                this.specialPagesField = value;
            }
        }
        
        /// <remarks/>
        public int PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        public FontType FontType {
            get {
                return this.fontTypeField;
            }
            set {
                this.fontTypeField = value;
            }
        }
        
        /// <remarks/>
        public string FontName {
            get {
                return this.fontNameField;
            }
            set {
                this.fontNameField = value;
            }
        }
        
        /// <remarks/>
        public double FontSize {
            get {
                return this.fontSizeField;
            }
            set {
                this.fontSizeField = value;
            }
        }
        
        /// <remarks/>
        public bool FontBold {
            get {
                return this.fontBoldField;
            }
            set {
                this.fontBoldField = value;
            }
        }
        
        /// <remarks/>
        public bool FontItalic {
            get {
                return this.fontItalicField;
            }
            set {
                this.fontItalicField = value;
            }
        }
        
        /// <remarks/>
        public HorizontalAlignment HorizontalAlignment {
            get {
                return this.horizontalAlignmentField;
            }
            set {
                this.horizontalAlignmentField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool Wrap {
            get {
                return this.wrapField;
            }
            set {
                this.wrapField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public enum PdfFieldType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        FormField,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        MultilineText,
        
        /// <remarks/>
        SolidRectangle,
        
        /// <remarks/>
        HollowRectangle,
        
        /// <remarks/>
        SolidOval,
        
        /// <remarks/>
        HollowOval,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public enum SpecialPages {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        First,
        
        /// <remarks/>
        Last,
        
        /// <remarks/>
        All,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public enum FontType {
        
        /// <remarks/>
        StandardPdf,
        
        /// <remarks/>
        CustomTrueType,
        
        /// <remarks/>
        ServerInstalledTrueType,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public enum HorizontalAlignment {
        
        /// <remarks/>
        Left,
        
        /// <remarks/>
        Center,
        
        /// <remarks/>
        Right,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public partial class TrueTypeFontSpecification {
        
        private string fontNameField;
        
        private byte[] fontDefinitionField;
        
        /// <remarks/>
        public string FontName {
            get {
                return this.fontNameField;
            }
            set {
                this.fontNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FontDefinition {
            get {
                return this.fontDefinitionField;
            }
            set {
                this.fontDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18034")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://kindredhealthcare.com/")]
    public partial class PdfFieldExtended : PdfField {
        
        private double xOffsetField;
        
        private double yOffsetField;
        
        private double rotationField;
        
        private bool wrapHeightField;
        
        /// <remarks/>
        public double XOffset {
            get {
                return this.xOffsetField;
            }
            set {
                this.xOffsetField = value;
            }
        }
        
        /// <remarks/>
        public double YOffset {
            get {
                return this.yOffsetField;
            }
            set {
                this.yOffsetField = value;
            }
        }
        
        /// <remarks/>
        public double Rotation {
            get {
                return this.rotationField;
            }
            set {
                this.rotationField = value;
            }
        }
        
        /// <remarks/>
        public bool WrapHeight {
            get {
                return this.wrapHeightField;
            }
            set {
                this.wrapHeightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GeneratePDF1CompletedEventHandler(object sender, GeneratePDF1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDF1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePDF1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GeneratePDF2CompletedEventHandler(object sender, GeneratePDF2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDF2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePDF2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GeneratePDF3CompletedEventHandler(object sender, GeneratePDF3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDF3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePDF3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GeneratePDF4CompletedEventHandler(object sender, GeneratePDF4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDF4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePDF4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GeneratePDF5CompletedEventHandler(object sender, GeneratePDF5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeneratePDF5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeneratePDF5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MergeCompletedEventHandler(object sender, MergeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MergeExtendedCompletedEventHandler(object sender, MergeExtendedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeExtendedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeExtendedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void StitchDocumentsCompletedEventHandler(object sender, StitchDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StitchDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StitchDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void StitchPagesCompletedEventHandler(object sender, StitchPagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StitchPagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StitchPagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PageCountCompletedEventHandler(object sender, PageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PrintPDFCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PrintPDFWithFailoverCompletedEventHandler(object sender, PrintPDFWithFailoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrintPDFWithFailoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrintPDFWithFailoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AvailablePrintersCompletedEventHandler(object sender, AvailablePrintersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AvailablePrintersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AvailablePrintersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void PrinterExistsCompletedEventHandler(object sender, PrinterExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrinterExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrinterExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CanOpenPrinterCompletedEventHandler(object sender, CanOpenPrinterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CanOpenPrinterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CanOpenPrinterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetImpersonatedUserCompletedEventHandler(object sender, GetImpersonatedUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImpersonatedUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImpersonatedUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InstalledPrintersCompletedEventHandler(object sender, InstalledPrintersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstalledPrintersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstalledPrintersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591