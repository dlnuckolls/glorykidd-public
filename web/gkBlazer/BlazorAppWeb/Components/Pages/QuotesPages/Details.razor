@page "/quotes/details"
@using Microsoft.EntityFrameworkCore
@using BlazorAppWeb.Models
@inject IDbContextFactory<BlazorAppWeb.Data.BlazorAppWebQuotesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Quotes</h2>
    <hr />
    @if (quotes is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@quotes.Author</dd>
            <dt class="col-sm-2">Quote</dt>
            <dd class="col-sm-10">@quotes.Quote</dd>
            <dt class="col-sm-2">LastUsedDate</dt>
            <dd class="col-sm-10">@quotes.LastUsedDate</dd>
            <dt class="col-sm-2">Count</dt>
            <dd class="col-sm-10">@quotes.Count</dd>
        </dl>
        <div>
            <a href="@($"/quotes/edit?id={quotes.Id}")">Edit</a> |
            <a href="@($"/quotes")">Back to List</a>
        </div>
    }
</div>

@code {
    private Quotes? quotes;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        quotes = await context.Quotes.FirstOrDefaultAsync(m => m.Id == Id);

        if (quotes is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
